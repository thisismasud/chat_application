<div class="modal-wrapper" id="add-conversation-modal">
  <div class="modal">
    <a onclick="closeModal()" class="modal-close">+</a>
    <div class="modal-title">
      <h2>Create New Conversation</h2>
    </div>
    <div class="modal-body">
      <form id="add-conversation-form">
        <input
          type="text"
          placeholder="Search user by name, email or mobile number"
          name="user"
          id="user"
          autocomplete="off"
        />
        <p class="error"></p>
        <div class="search_users"></div>
        <input type="submit" class="hide" value="Submit" />
      </form>
    </div>
  </div>
</div>

<script>
  const modal = document.querySelector("#add-conversation-modal");
  const input = document.querySelector("input#user");
  const conversation_list = document.querySelector("#conversation-list");
  let users_placeholder = document.querySelector(".search_users");
  //typing detector
  let typingTimer;
  const doneTypingInterval = 500;

  //toast on conversation creation failure
  const conversationCreationFailureToast = Toastify({
    text: "Error creating conversation",
    duration: 1000,
  });

  function openModal() {
    modal.style.display = "block";
  }
  function closeModal() {
    modal.style.display = "none";
    //reset
    users_placeholder.style.display = "none";
    input.value = "";
  }

  //on keyup, start the countdown
  input.addEventListener("keyup", function () {
    clearTimeout(typingTimer);

    users_placeholder.style.display = "none";

    if (input.value) {
      //The purpose of storing this identifier in typingTimer is to keep track of the scheduled timeout. Later, if needed, you can use this identifier with clearTimeout to cancel the scheduled timeout before it triggers the searchUsers function.
      typingTimer = setTimeout(searchUsers, doneTypingInterval);
    }
  });

  //on keydown, clear the countdown
  input.addEventListener("keydown", function () {
    clearTimeout(typingTimer);
  });

  //send request for search
  async function searchUsers() {
    let response = await fetch("/inbox/search", {
      method: "POST",
      body: JSON.stringify({
        user: input.value,
      }),
      headers: {
        "Content-Type": "application/json; charset=UTF-8",
      },
    });

    //get response
    let result = await response.json();

    //handles errors
    if (result.errors) {
      const errorPlaceholder = document.querySelector("p.error");
      errorPlaceholder.textContent = result.errors.common.msg;
      errorPlaceholder.style.display = "block";
    } else {
      if (result.length > 0) {
        let generateHtml = "<ul>";
        result.forEach((user) => {
          const avatar = user.avatar
            ? "./uploads/avatars/" + user.avatar
            : "./images/nophoto.png";

          generateHtml += `<li onclick = "createConversation('${user._id}', '${user.name}', '${user.avatar}')">
              <div class="user">
                <div class="avatar">
                  <img src="${avatar}" />
                </div>
                <div class="username">${user.name}</div>
              </div>
            </li>`;
        });
        generateHtml += "</ul>";
        users_placeholder.innerHTML = generateHtml;
        users_placeholder.style.display = "block";
      }
    }
  }

  async function createConversation(participant_id, name, avatar) {
    try {
      const response = await fetch("/inbox/conversation", {
        method: "POST",
        body: JSON.stringify({
          id: participant_id,
          participant: name,
          avatar: avatar != undefined ? avatar : null,
        }),
        headers: {
          "Content-Type": "application/json; charset=utf-8",
        },
      });
      let result = await response.json();

      if (!result.errors) {
        //reset everything
        users_placeholder.style.display = "none";
        input.value = name;
        setTimeout(() => {
          location.reload();
        }, 1000);
      } else {
        throw new Error(result.errors.common.msg);
      }
    } catch (err) {
      conversationCreationFailureToast.showToast();
    }
  }
</script>
